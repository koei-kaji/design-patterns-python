name: CI

on:
  pull_request:
    branches:
      - main
    paths:
      - "**"
      - "!**.md"

jobs:
  check-code:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9.11]
    env:
      WORKDIR: ./
      PIP_VERSION: 21.2.4
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install library
        run: poetry install --no-interaction

      - name: Check format python code
        id: check-format-python-code
        working-directory: ${{ env.WORKDIR }}
        run: |
          make format-check

      - name: Check lint python code
        id: check-lint-python-code
        working-directory: ${{ env.WORKDIR }}
        run: |
          make lint

      - name: Test with pytest
        id: test-with-pytest
        working-directory: ${{ env.WORKDIR }}
        run: |
          make test

      - name: Check Safety with safety
        id: check-safety-with-safety
        working-directory: ${{ env.WORKDIR }}
        run: |
          make safety-check

      # # NOTE: https://github.com/marketplace/actions/hadolint-action
      # # NOTE: use official github action cause it is simpler
      # - name: Lint dockerfile
      #   id: lint-dockerfile
      #   uses: hadolint/hadolint-action@v1.6.0
      #   env:
      #     DOCKER_CONTENT_TRUST: 0
      #   with:
      #     dockerfile: ${{ env.WORKDIR }}/Dockerfile

      # # NOTE: https://github.com/goodwithtech/dockle#debianubuntu
      # - name: Install dockle
      #   id: install-dockle
      #   run: |
      #     VERSION=$(
      #     curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
      #     grep '"tag_name":' | \
      #     sed -E 's/.*"v([^"]+)".*/\1/' \
      #     ) && curl -L -o dockle.deb https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.deb
      #     sudo dpkg -i dockle.deb && rm dockle.deb

      # # NOTE: https://aquasecurity.github.io/trivy/v0.18.3/installation/#debianubuntu
      # # NOTE: We dont't use official github action cause it is simpler
      # #       >> https://github.com/aquasecurity/trivy-action
      # - name: Install trivy
      #   id: install-trivy
      #   run: |
      #     sudo apt-get install wget apt-transport-https gnupg lsb-release
      #     wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      #     echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
      #     sudo apt-get update
      #     sudo apt-get install trivy

      # - name: Vulnerability scanning for docker image
      #   id: vulnerability-scanning-for-docker-image
      #   working-directory: ${{ env.WORKDIR }}
      #   run: |
      #     make scan-docker

      # # TODO: slack web hook
