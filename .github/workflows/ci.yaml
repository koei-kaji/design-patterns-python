name: CI

on:
  pull_request:
    branches:
      - main
    paths:
      - "python/**"
      - ".github/workflows/ci-python.yaml"
      - "!**.md"

jobs:
  check-code:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9.11]
    env:
      WORKDIR: ./
      PIP_VERSION: 21.2.4
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # NOTE: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#adding-a-system-path
      - name: Install poetry
        id: install-poetry
        run: |
          python -m pip install --upgrade pip==${{ env.PIP_VERSION }}
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Set up cache
        id: set-up-cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        id: install-dependencies
        working-directory: ${{ env.WORKDIR }}
        run: |
          poetry install

      - name: Check format python code
        id: check-format-python-code
        working-directory: ${{ env.WORKDIR }}
        run: |
          make format-check

      - name: Check lint python code
        id: check-lint-python-code
        working-directory: ${{ env.WORKDIR }}
        run: |
          make lint

      - name: Test with pytest
        id: test-with-pytest
        working-directory: ${{ env.WORKDIR }}
        run: |
          make test

      # # NOTE: https://github.com/marketplace/actions/hadolint-action
      # # NOTE: use official github action cause it is simpler
      # - name: Lint dockerfile
      #   id: lint-dockerfile
      #   uses: hadolint/hadolint-action@v1.6.0
      #   env:
      #     DOCKER_CONTENT_TRUST: 0
      #   with:
      #     dockerfile: ${{ env.WORKDIR }}/Dockerfile

      # # NOTE: https://github.com/goodwithtech/dockle#debianubuntu
      # - name: Install dockle
      #   id: install-dockle
      #   run: |
      #     VERSION=$(
      #     curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
      #     grep '"tag_name":' | \
      #     sed -E 's/.*"v([^"]+)".*/\1/' \
      #     ) && curl -L -o dockle.deb https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.deb
      #     sudo dpkg -i dockle.deb && rm dockle.deb

      # # NOTE: https://aquasecurity.github.io/trivy/v0.18.3/installation/#debianubuntu
      # # NOTE: We dont't use official github action cause it is simpler
      # #       >> https://github.com/aquasecurity/trivy-action
      # - name: Install trivy
      #   id: install-trivy
      #   run: |
      #     sudo apt-get install wget apt-transport-https gnupg lsb-release
      #     wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      #     echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
      #     sudo apt-get update
      #     sudo apt-get install trivy

      # - name: Vulnerability scanning for docker image
      #   id: vulnerability-scanning-for-docker-image
      #   working-directory: ${{ env.WORKDIR }}
      #   run: |
      #     make scan-docker

      # # TODO: slack web hook
